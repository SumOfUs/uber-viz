---
title: How Uber Rolls
---
<div class="uber-viz">
  <h1 class="uber-viz__title">Why so many people are so mad at Uber</h1>
  <div class="map-graphic">
    <div id="map-bubbles-chart" class="map-graphic__component"></div>
    <div id="world-map" class="map-graphic__component"></div>
  </div>
  <div id="type-chart"></div>
  <div id="stories-table"></div>
</div>

<script type="text/template" id="incident-card-template">
  <div class="incident-card">
    <div class="incident-card__type" style="background-color: {{ color }}">
      {{ d.category }} - {{ d.location }}
    </div>
    <div class="incident-card__main">
      <div class="incident-card__tagline">{{ d.tag_line }}</div>
      <div class="incident-card__summary">{{ d.summary }}</div>
      <a href="{{ d.link_1 }}" class="incident-card__source" target="_blank">Source</a>
    </div>
  </div>
</script>

<script type="text/javascript" src='https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore.js'></script>
<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
<script src="http://d3js.org/topojson.v1.min.js"></script>
<script src="//d3js.org/d3.geo.projection.v0.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/crossfilter/1.3.12/crossfilter.js"></script>
<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/dc/2.0.1/dc.css" />
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/dc/2.0.1/dc.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/d3-tip/0.6.3/d3-tip.min.js"></script>
<script src="/javascripts/dc-tooltip.js"></script>


<script>
var width = 1060,
    height = 600;

var projection = d3.geo.robinson();
var path = d3.geo.path()
    .projection(projection);

var mapSvg = d3.select("#world-map").append("svg")
    .attr("width", width)
    .attr("height", height);

var bubbleSvg = d3.select('#map-bubbles-chart').append('svg')
    .attr("width", width)
    .attr("height", height);

var categorySvg = d3.select('#category-chart').append('svg')
    .attr("width", 300)
    .attr("height", 400);

var categoryColors = {
  "Corporate citizenship": '#34a853',
  'Regulation and lobbying': '#0c0081',
  'Pay and worker treatment': '#df7c08'
};
var colorDomain = [];
var colorRange = [];
_.each(categoryColors, function(v, k) { colorDomain.push(k); colorRange.push(v); });

d3.csv('/javascripts/uber-cities.csv', function(error, cities){
  if (error) console.error(error);

  var ndx = crossfilter(cities);
  var locationDimension = ndx.dimension(function(d) { return d.location; });
  var locationGroup = locationDimension.group().reduce(
    function (p, v) {
      if (p.lat !== v.lat) p.lat = v.lat;
      if (p.long !== v.long) p.long = v.long;
      p.count++;
      if (p.categoryCounts.hasOwnProperty(v.category)) {
        p.categoryCounts[v.category]++;
      } else {
        p.categoryCounts[v.category] = 1;
      }
      p.taglines = _.union(p.taglines, [v.tag_line]);
      p.location = v.location;
      return p;
    },
    function (p, v) {
      p.count--;
      p.categoryCounts[v.category]--;
      if (p.categoryCounts[v.category] < 1) delete p.categoryCounts[v.category];
      p.taglines = _.difference(p.taglines, [v.tag_line]);
      return p;
    },
    function () {
      return {
        lat: null,
        long: null,
        categoryCounts: {},
        taglines: [],
        count: 0
      };
    }
  );
  var categoryDimension = ndx.dimension(function(d) { return d.category; });
  var categoryGroup = categoryDimension.group().reduce(
    function(p, v){ return p },
    function(p, v){ return p },
    function(){ return 100 }
  );

  var colorBar = function(categoryCounts) {
    var total = _.reduce(_.values(categoryCounts), function(a, b) { return a + b; }, 0);
    var barHtml = _.map(_.keys(categoryCounts), function(k) {
      var percent = 100 * categoryCounts[k] / total;
      return "<div style='background-color: "+categoryColors[k]+"; width: "+percent+"%;''></div>";
    }).join('');
    return "<div class='bubble-chart__tooltip-color-bar'>"+barHtml+"</div>";
  };

  var mapBubbles = dc.bubbleChart('#map-bubbles-chart')
    .svg(d3.select('#map-bubbles-chart svg'))
    .width(width*1.08)
    .height(height*1.08)
    .dimension(locationDimension)
    .group(locationGroup)
    .keyAccessor(function(p) {
      projected = projection([p.value.long, p.value.lat]);
      return projected ? projected[0] : 0;
    })
    .valueAccessor(function(p) {
      projected = projection([p.value.long, p.value.lat]);
      return projected ? -projected[1] : 0;
    })
    .radiusValueAccessor(function(p) { return p.value.count; })
    .x(d3.scale.linear().domain([0, width]))
    .y(d3.scale.linear().domain([-1 * height, 0]))
    .minRadius(3)
    .title(function(p) {
      if (p.value.taglines.length > 1) {
        var taglines = '<ul><li>'+p.value.taglines.join('</li><li>')+'</li></ul>';
      } else {
        var taglines = '<div class="bubble-chart__single-tagline">'+p.value.taglines[0]+'</div>';
      }
      console.log(p.value.categoryCounts);
      return colorBar(p.value.categoryCounts)+"<div class='bubble-chart__taglines'><h4>"+p.value.location+"</h4>"+taglines+"</div>";
    })
    .colorAccessor(function(p) {
      var max = _.chain(p.value.categoryCounts).max().value();
      category = _.chain(p.value.categoryCounts).invert().value()[max];
      return category;
    })
    .colors(d3.scale.ordinal().domain(colorDomain).range(colorRange))
    .addFilterHandler(function(filters, filter){
      filters.length = 0; // empty the array
      filters.push(filter);
      return filters;
    })
    .renderLabel(false)
  ;

  var categories = dc.rowChart('#category-chart')
    .svg(d3.select('#category-chart svg'))
    .width(250)
    .height(400)
    .dimension(categoryDimension)
    .group(categoryGroup)
    .elasticX(false);
  ;

  var incidentTemplate = d3.select('#incident-card-template').html();
  _.templateSettings = {
    interpolate: /\{\{(.+?)\}\}/g
  };
  var table = dc.dataGrid('#stories-table')
    .dimension(categoryDimension)
    .group(function(d) { return d; })
    .size(100)
    .html(function(d) {
      return _.template(incidentTemplate)({d: d, color: categoryColors[d.category]});
    });
  ;

  dc.renderAll();
  dc.tooltipMixin(mapBubbles);
  mapBubbles.tip.elements.on('mouseleave', null);
});

var g = mapSvg.append("g");

d3.json("/javascripts/world-50m.json", function(error, world) {
  if (error) throw error;

  g.append("path")
    .datum(topojson.merge(world, world.objects.countries.geometries))
    .attr("class", "land")
    .attr("d", path);

});

</script>
